pluginManagement {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "com.gradle.enterprise" version "3.8.1"
}

//includeBuild "build-conventions"
//includeBuild "build-tools"
//includeBuild "build-tools-internal"

rootProject.name = 'restaurant-recommender-java'

include 'lowlevel-restclient', 'elasticsearch-client', 'yelp-fusion-client'

dependencyResolutionManagement {
    versionCatalogs {
        buildLibs {
            from(files("gradle/build.versions.toml"))
        }
    }
}

//List projects = []

//void addSubProjects(String path, File dir) {
//    if (!dir.isDirectory()) return;
//    if (dir.name == 'buildSrc') return;
//    if (!new File(dir, 'build.gradle').exists()) return;
//    if (new File(dir, 'settings.gradle').exists()) return;
//    if (findProject(dir) != null) return;
//
//    final String projectName = "${path}:${dir.name}"
//
//    include projectName
//    if (path.isEmpty() || path.startsWith(':example-plugins')) {
//        project(projectName).projectDir = dir
//    }
//    for (File subdir : dir.listFiles()) {
//        addSubProjects(projectName, subdir)
//    }
//}
//
//addSubProjects('', new File(rootProject.projectDir, 'libs'))
//addSubProjects('', new File(rootProject.projectDir, 'modules'))
//addSubProjects('', new File(rootProject.projectDir, 'plugins'))
//addSubProjects('test', new File(rootProject.projectDir, 'test/external-modules'))
//
//include projects.toArray(new String[0])
//
//project(":libs").children.each { libsProject ->
//    libsProject.name = "elasticsearch-${libsProject.name}"
//    libsProject.children.each { lp ->
//        lp.name = lp.name  // for :libs:elasticsearch-x-content:impl
//    }
//}

